// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyApi.Data.DBData;

namespace PharmacyApi.Migrations
{
    [DbContext(typeof(PharmacyContext))]
    [Migration("20211018050941_AddLogger2")]
    partial class AddLogger2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Analizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalizerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Analizers");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.AnalizerWork", b =>
                {
                    b.Property<int>("AnalizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDateOfReceipt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OrderDateOfcompletion")
                        .HasColumnType("datetime")
                        .HasColumnName("OrderDateOFCompletion");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("AnalizerId");

                    b.HasIndex("OrderId");

                    b.ToTable("AnalizerWork");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.AuthenticationLogger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attempt")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationLoggers");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.InsuranceСompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Bic")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("BIC");

                    b.Property<string>("CheckingAccount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("INN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceСompany");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.InvoicesIssued", b =>
                {
                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndPeriod")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime>("StartPeriod")
                        .HasColumnType("date");

                    b.HasKey("InsuranceCompanyId", "UserId");

                    b.ToTable("InvoicesIssued");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.LaboratiryService", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Code");

                    b.ToTable("LaboratiryServices");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.LaboratoryServicesToOrder", b =>
                {
                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("AnalyzerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateOfFinished")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("LaboratoryServiceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("AnalyzerId");

                    b.HasIndex("LaboratoryServiceId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("LaboratoryServicesToOrder");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DateOfCreation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateOfBirth")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Ein")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("EIN");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUID");

                    b.Property<int?>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("SosialSecNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SosialType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Ua")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UA");

                    b.HasKey("PatientId");

                    b.HasIndex("InsuranceCompanyId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("LastEnterDate")
                        .HasColumnType("date");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ServicesCodes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.AnalizerWork", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.Analizer", "Analizer")
                        .WithMany()
                        .HasForeignKey("AnalizerId")
                        .HasConstraintName("FK_AnalizerWork_Analizers")
                        .IsRequired();

                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_AnalizerWork_Order")
                        .IsRequired();

                    b.Navigation("Analizer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.AuthenticationLogger", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.InvoicesIssued", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.InsuranceСompany", "InsuranceCompany")
                        .WithMany("InvoicesIssueds")
                        .HasForeignKey("InsuranceCompanyId")
                        .HasConstraintName("FK_InvoicesIssued_InsuranceСompany")
                        .IsRequired();

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.LaboratoryServicesToOrder", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.Analizer", "Analyzer")
                        .WithMany()
                        .HasForeignKey("AnalyzerId")
                        .HasConstraintName("FK_LaboratoryServicesToOrder_Analizers")
                        .IsRequired();

                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.LaboratiryService", "LaboratoryService")
                        .WithMany()
                        .HasForeignKey("LaboratoryServiceId")
                        .HasConstraintName("FK_LaboratoryServicesToOrder_LaboratiryServices")
                        .IsRequired();

                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_LaboratoryServicesToOrder_Order")
                        .IsRequired();

                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LaboratoryServicesToOrder_Users")
                        .IsRequired();

                    b.Navigation("Analyzer");

                    b.Navigation("LaboratoryService");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Order", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Order_Patients")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Patient", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.InsuranceСompany", "InsuranceCompany")
                        .WithMany("Patients")
                        .HasForeignKey("InsuranceCompanyId")
                        .HasConstraintName("FK_Patients_InsuranceСompany");

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.User", b =>
                {
                    b.HasOne("PharmacyApi.Data.DBData.EntityModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.InsuranceСompany", b =>
                {
                    b.Navigation("InvoicesIssueds");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Patient", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PharmacyApi.Data.DBData.EntityModels.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
